trigger:
  batch: true
  branches:
    include:
    - dev
    - terragrunt
  tags:
    include:
    - '*'

variables:
  vmImageName: ubuntu-latest
  location: westeurope
  environmentName: Python-Container-App-Dev

  registryServiceConnection: akazureregistry
  imageNamespace: learn
  imageName: demoapp
  tag: dev

  armServiceConnection: AzureServiceConnection

  skipBuild: true

pool:
  vmImage: $(vmImageName)

stages:
# Build stage
- stage: Build
  displayName: Build and push stage

  jobs:
  - job: Build
    displayName: Build Image
    condition: eq('${{ variables.skipBuild }}', false)

    steps:
  # Build docker image step
    - task: Docker@2
      displayName: Build the image
      inputs:
        command: build
        repository: '${{ variables.imageNamespace }}/${{ variables.imageName }}'
        containerRegistry: ${{ variables.registryServiceConnection }}
        tags: ${{ variables.tag }}
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        arguments: --build-arg git_commit=$(Build.SourceVersion)

    - task: Docker@2
      displayName: Push the image to the registry
      inputs:
        command: push
        repository: '${{ variables.imageNamespace }}/${{ variables.imageName }}'
        containerRegistry: ${{ variables.registryServiceConnection }}
        tags: ${{ variables.tag }}

# Deployment stage
- stage: Deploy
  displayName: Deploy application

  jobs:
  - deployment: Deploy
    displayName: Deploy Container Apps

    # Fake environment (history/tracebility only)
    environment: '${{ variables.environmentName }}'

    strategy:
      runOnce:
        deploy:
          steps:
          # Checkout to Build.SourcesDirectory
          - checkout: self

          # Install terraform
          - task: TerraformInstaller@1
            displayName: Install Terraform

          # Install terragrunt
          - task: Bash@3
            displayName: Install Terragrunt
            inputs:
              targetType: inline
              script: |
                eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
                brew install terragrunt

          # Test terraform CLI
          - task: TerraformCLI@0
            displayName: Check terraform version
            inputs:
              command: version

          # Generate teragrunt deployment variables
          - task: PowerShell@2
            displayName:  Generate deployment variables file
            inputs:
              targetType: inline
              pwsh: true
              workingDirectory: '$(Build.SourcesDirectory)/terraform/demoapp.v2/envs/prod'
              script: |
                $json_str  = @{
                  app_tag = '${{ variables.tag }}'
                } | ConvertTo-Json
                $json_str | Write-Output
                $json_str | Out-File -FilePath 'deploy-vars.json' -Encoding utf8 -Force

          # Run terragrunt deployment for prod environment
          - task: AzureCLI@2
            displayName: Deploy Prod environment
            inputs:
              azureSubscription: ${{ variables.armServiceConnection }}
              scriptType: bash
              scriptLocation: inlineScript
              workingDirectory: '$(Build.SourcesDirectory)/terraform/demoapp.v2/envs/prod'
              inlineScript:
                terragrunt run-all apply -auto-approve --terragrunt-non-interactive

          # Terraform output - get URLs of the apps
          # - task: PowerShell@2
          #   name: tfoutput
          #   displayName:  Get URLs of the deployed apps
          #   inputs:
          #     targetType: inline
          #     pwsh: true
          #     workingDirectory: '$(Build.SourcesDirectory)/terraform/demoapp'
          #     script: |
          #       $tf_output = terraform output -json | ConvertFrom-Json
          #       $urls = $tf_output.apps_url.value | %{ return "https://" + $_  } | Join-String -Separator ","
          #       Write-Host "Application URL list: ${urls}"
          #       Write-Host "##vso[task.setvariable variable=tf_app_urls;isOutput=true]${urls}"

# Verification job
  # - job: Verify
  #   displayName: Run verification tests
  #   dependsOn: Deploy

  #   variables:
  #     terraformAppUrls: $[dependencies.Deploy.outputs['Deploy.tfoutput.tf_app_urls']]
  #   steps:
  #   - script: |
  #       pip install --upgrade pip
  #       pip install --upgrade pytest pytest-azurepipelines urllib3
  #     displayName: 'Install dependencies'

  #   - script: |
  #       echo "URLs: $(terraformAppUrls)"
  #       echo "Whait 10 seconds before test"
  #       sleep 10
  #       pytest --app-urls "$(terraformAppUrls)" --commit "$(Build.SourceVersion)"
  #     displayName: 'Run infra tests'
  #     workingDirectory: $(Build.SourcesDirectory)/infra-tests
