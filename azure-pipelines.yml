trigger:
  batch: true
  branches:
    include:
    - dev

resources:
- repo: self

variables:
  - group: 'azure-learn-acr'
  # Container registry service connection established during pipeline creation
  - name: dockerRegistryServiceConnection
    value: '580ae529-1a08-4208-8b04-a344e318b8df'
  - name: imageRepository
    value: 'learn/demo-python'
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/Dockerfile'
  - name: tag
    value: 'dev'
  - name: resourceGroup
    value: 'AzureLearn'
  - name: containerAppName
    value: 'demo-python-dev'
  - name: containerAppEnvironment
    value: 'DemoContainerAppEnv01'
  - name: vmImageName
    value: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build Image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploy
  displayName: Deploy application
  jobs:
  - deployment: Deploy
    displayName: Deploy Container App
    pool:
      vmImage: $(vmImageName)
    environment: 'Python-Container-App-Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureContainerApps@1
            displayName: "Deploy container app: $(containerAppName)"
            inputs:
              connectedServiceNameARM: AzureServiceConnection
              resourceGroup: $(resourceGroup)
              acrName: $(acrName)
              acrPassword: $(acrPassword)
              acrUsername: $(acrUsername)
              imageToDeploy: "$(acrName).azurecr.io/$(imageRepository):1.0.0"
              containerAppName: $(containerAppName)
              containerAppEnvironment: $(containerAppEnvironment)
              ingress: external
              targetPort: 8000






