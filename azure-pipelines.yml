trigger:
  batch: true
  branches:
    include:
    - dev

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '580ae529-1a08-4208-8b04-a344e318b8df'
  imageRepository: 'learn/demo-python'
  containerRegistry: 'akazureregistry.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: 'dev'
  resourceGroup: 'AzureLearn'
  containerAppName: 'demo-python-dev'
  containerAppEnvironment: 'DemoContainerAppEnv01'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build Image
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

- stage: Deploy
  displayName: Deploy application
  jobs:
  - deployment: Deploy
    displayName: Deploy Container App
    pool:
      vmImage: $(vmImageName)
    environment: 'Python-Container-App-Dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureContainerApps@1
            displayName: "Deploy container app: $(containerAppName)"
            inputs:
              connectedServiceNameARM: AzureServiceConnection
              resourceGroup: $(resourceGroup)
              imageToDeploy: "$(containerRegistry)/$(imageRepository):$(tag)"
              acrName: $(containerRegistry)
              containerAppName: $(containerAppName)
              containerAppEnvironment: $(containerAppEnvironment)
              ingress: external
              targetPort: 8080






