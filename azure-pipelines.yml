trigger:
  batch: true
  branches:
    include:
    - main
    - dev
  tags:
    include:
    - '*'

variables:
  vmImageName: ubuntu-latest
  location: westeurope
  environmentName: Python-Container-App-Dev

  dockerRegistryName: akazureregistry
  registryServiceConnection: akazureregistry
  imageNamespace: learn
  imageName: demoapp
  tag: dev

  armServiceConnection: AzureServiceConnection
  subscriptionId: b0570a95-0377-4937-8e15-6555b6f600f4

  namePrefix: demoapp
  resourceGroup: AzureLearn

  tfstateStorageAccount: aktfstate
  tfstateStorageContainer: tfstate
  tfstateStorageKey: container-demoapp.tfstate

  skipBuild: false

pool:
  vmImage: $(vmImageName)

stages:
# Build stage
- stage: Build
  displayName: Build and push stage

  jobs:
  - job: Build
    displayName: Build Image
    condition: eq('${{ variables.skipBuild }}', false)

    steps:
  # Build docker image step
    - task: Docker@2
      displayName: Build the image
      inputs:
        command: build
        repository: '${{ variables.imageNamespace }}/${{ variables.imageName }}'
        containerRegistry: ${{ variables.registryServiceConnection }}
        tags: ${{ variables.tag }}
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        arguments: --build-arg git_commit=$(Build.SourceVersion)

    - task: Docker@2
      displayName: Push the image to the registry
      inputs:
        command: push
        repository: '${{ variables.imageNamespace }}/${{ variables.imageName }}'
        containerRegistry: ${{ variables.registryServiceConnection }}
        tags: ${{ variables.tag }}

# Deployment stage
- stage: Deploy
  displayName: Deploy application

  jobs:
  - deployment: Deploy
    displayName: Deploy Container Apps

    # Fake environment (history/tracebility only)
    environment: '${{ variables.environmentName }}'

    strategy:
      runOnce:
        deploy:
          steps:
          # Checkout to Build.SourcesDirectory
          - checkout: self

          # Install terraform latest
          - task: TerraformInstaller@1
            displayName: Install terraform

          # Test terraform CLI
          - task: TerraformCLI@0
            displayName: Check terraform version
            inputs:
              command: version

          # Generate terraform variables .auto.tfvars.json file
          - task: PowerShell@2
            displayName:  Generate parameters file for deployment
            inputs:
              targetType: inline
              pwsh: true
              workingDirectory: '$(Build.SourcesDirectory)/terraform/demoapp'
              script: |
                $json_str  = @{
                  namePrefix = '${{ variables.namePrefix }}'
                  resourceGroupName = '${{ variables.resourceGroup }}'
                  registry = '${{ variables.dockerRegistryName }}'
                  containerImage = '${{ variables.imageNamespace }}/${{ variables.imageName }}'
                  containerTag = '${{ variables.tag }}'
                  revisionSuffix = "$(Build.BuildId)-" + "$(Build.SourceVersion)".substring(0,8)
                  gitCommitSHA = "$(Build.SourceVersion)"
                } | ConvertTo-Json
                $json_str | Write-Output
                $json_str | Out-File -FilePath 'deploy_params.auto.tfvars.json' -Encoding utf8

          # Terraform init (Azure strorage backend)
          - task: TerraformCLI@0
            displayName: 'Terraform init'
            inputs:
              command: init
              workingDirectory: '$(Build.SourcesDirectory)/terraform/demoapp'
              backendType: azurerm
              backendServiceArm: ${{ variables.armServiceConnection }}
              backendAzureRmSubscriptionId: ${{ variables.subscriptionId }}
              ensureBackend: false
              backendAzureRmKey: ${{ variables.tfstateStorageKey }}

          # Terraform plan
          - task: TerraformCLI@0
            displayName: 'Terraform apply'
            inputs:
              command: apply
              workingDirectory: '$(Build.SourcesDirectory)/terraform/demoapp'
              environmentServiceName: ${{ variables.armServiceConnection }}

          # Terraform output - get URLs of the apps
          - task: PowerShell@2
            name: tfoutput
            displayName:  Get URLs of the deployed apps
            inputs:
              targetType: inline
              pwsh: true
              workingDirectory: '$(Build.SourcesDirectory)/terraform/demoapp'
              script: |
                $tf_output = terraform output -json | ConvertFrom-Json
                $urls = $tf_output.apps_url.value | Join-String -Separator ","
                Write-Host "Application URL list: ${urls}"
                Write-Host "##vso[task.setvariable variable=tf_app_urls;isOutput=true]${urls}"


# Verification stage
- stage: Verify
  displayName: Verify deployed application

  jobs:
  - job: Verify
    displayName: Run verification tests
    variables:
      terraformAppUrls: $[stageDependencies.Deploy.Deploy.outputs['tfoutput.tf_app_urls']]
    steps:
    - script: |
        pip install pytest pytest-azurepipelines
      displayName: 'Install dependencies'

    - script: |
        echo URLs: $(terraformAppUrls)
        # python -m pytest \
        #   --front-url=https://front.az.mechlab.net/ \
        #   --backdb-url=https://backdb.az.mechlab.net/ \
        #   --backstor-url=https://backstor.az.mechlab.net/ \
        #   --commit=$(Build.SourceVersion) \
        #   infra-tests/
      displayName: 'Run infra tests'

